
# MySQL数据库中的约束
______________________________主键约束(PRIMARY KEY)___________________________________
含义：
    定义表中唯一标识每一行记录的列（或列组合）。
特性:
    唯一性 (UNIQUE):
        该列（或列组合）的值在整个表中必须是唯一的,不能出现重复值.
    非空性 (NOT NULL):
        该列（或列组合）的值不允许为 NULL.
        必须为每一行提供一个值。
    标识性 (Identity):
        主键是表中每一行记录的“身份证号”，用于精确、快速地定位特定行。
    隐含索引 (Implicit Index):
        数据库系统会自动为主键列创建索引（通常是聚集索引 Clustered Index），
        这极大地加速了基于主键的查询（如 WHERE id = 123）和表连接（JOIN）操作。
    一个表只能有一个主键:
        虽然主键可以由多个列组成（复合主键）,但一个表只能定义一个 PRIMARY KEY 约束。
作用：
    强制每条记录的唯一标识.
    提供高效的数据检索路径 (通过自动创建的索引).
    作为外键引用 (FOREIGN KEY) 的目标，建立表与表之间的关系.

___________________________________唯一性约束(UNIQUE)__________________________________
含义：
    确保某列(或列组合)中的每个值在表中都是唯一的(除了 NULL 值).
特性:
    唯一性 (UNIQUE):
        该列（或列组合）的值在整个表中必须是唯一的,不能出现重复值.
    允许 NULL 值:
        与主键关键区别！UNIQUE 约束的列可以包含 NULL 值.
        通常,数据库系统允许在唯一列中有多个 NULL 值(因为 NULL 代表未知/缺失,不被视为彼此相等).
        但请注意,有些数据库（如 SQL Server）只允许一个 NULL 值(将 NULL 视为彼此相等),
        这取决于具体的 DBMS 实现。务必查阅你所用数据库的文档。
    隐含索引 (Implicit Index)：
            数据库系统通常也会为唯一约束列自动创建索引（通常是非聚集索引 Non-Clustered Index），以快速检查唯一性和加速基于该列的查询。
    一个表可以有多个唯一约束：
            你可以为不同的列（或列组合）分别定义 UNIQUE 约束。
作用：
	确保特定业务数据的唯一性(如身份证号、邮箱、用户名等),但这些列可能不是主键 (主键通常是代理键如自增 ID).
	防止在非主键列上输入重复值.
	提供高效的基于唯一列的查询路径.

__________________________________外键约束(FOREIGN KEY)_________________________________
含义：
		建立两个表之间的链接。
		它定义了一个表 (子表/引用表)中的列(外键列)
		必须引用另一个表 (父表/被引用表)中存在的值 (通常是主键或唯一键).
特性：
    引用关系 (Referential Integrity)：
                保证子表中的外键值要么是 NULL（如果允许），要么必须在父表的主键（或唯一键）列中存在对应的值。
    维护数据一致性：
                防止在子表中创建指向父表不存在的记录的“孤儿”数据。
    级联操作 (Cascade Actions - 可选)：
                可以定义当父表中的记录被更新 (ON UPDATE) 或删除 (ON DELETE) 时，对子表中相关记录的操作：
    CASCADE：
                父表记录更新/删除时，自动更新/删除子表中所有匹配的外键记录。
    SET NULL：
                父表记录删除时，将子表中匹配的外键列设置为 NULL（要求外键列允许 NULL）。
    SET DEFAULT：
                父表记录删除时，将子表中匹配的外键列设置为默认值（要求外键列定义了默认值）。
    RESTRICT / NO ACTION (通常是默认行为)：
                阻止执行会破坏引用完整性的操作（即如果子表有匹配记录，则不允许删除/更新父表记录）。
    作用：
        维护表与表之间的逻辑关系（如 Orders.CustomerID 引用 Customers.CustomerID）。
        确保相关数据的一致性（如不会出现订单对应不存在的客户）。

__________________________________非空约束(NOT NULL)__________________________________
含义：
    强制某列不能存储 NULL 值.
    插入或更新记录时,必须为该列提供一个值(可以是空字符串 ''、0 等，但不能是 NULL).
特性：
    最简单也最常用的约束之一.
    确保关键字段必须有值.
作用：
    防止遗漏必要的数据.
    提高数据质量,减少处理数据时因 NULL 导致的复杂逻辑.

____________________________________检查约束(CHECK)____________________________________
含义：
	定义某列的值必须满足的条件（布尔表达式）。
	插入或更新记录时，数据库会检查该条件是否为真。
特性：
	允许定义基于列值或跨列值的复杂业务规则。
	条件表达式可以包含列名、常量、函数和运算符 (如 >, <, =, BETWEEN, IN, LIKE 等).
作用：
	强制域完整性(Domain Integrity),确保数据在有效范围内(如年龄 >= 0，价格 > 0).
	强制特定格式(如邮箱地址包含 '@').
	强制列之间的逻辑关系(如 EndDate 必须大于 StartDate).

__________________________________默认值约束(DEFAULT)___________________________________
含义:
    为某列指定一个默认值.
    当向表中插入新记录时,如果没有明确为该列提供值,则数据库会自动使用这个默认值.
特性:
    简化插入操作.
    为可能为 NULL 的列提供合理的初始值.
    默认值可以是常量（字符串、数字）、表达式（如 GETDATE() 获取当前日期时间）或 NULL.
作用:
    避免手动输入常见值 (如设置 Country 默认为 'USA').
    自动记录时间戳 (如设置 CreatedAt 默认为 CURRENT_TIMESTAMP).
    为数值列提供初始值(如设置 Quantity 默认为 1).
--------------------------------------------------------------------------------------
自动增长:
    在 SQL 数据库中,自动增长（通常称为 Auto Increment）本身并不是一种独立的“约束”类型,而是一种特殊的列属性或特性.
    它最常与主键约束（PRIMARY KEY） 结合使用.
1. 什么是自动增长 (Auto Increment)?
    核心功能：
        它是一个数据库特性,允许为表中的某个列（通常是整数类型的列,
        如 INT, BIGINT, SMALLINT）自动生成唯一的、递增的数字值.
    主要用途:
        为表中的新记录自动生成唯一标识符.
        当你向表中插入新记录时,不需要为该列指定值,
        数据库系统会自动为其分配下一个可用的、比上一条记录更大的数字（通常是加1）.
    常见场景:
        自动增长是为表创建代理主键（Surrogate Key） 的最常用、最便捷的方式.
        代理主键是一个与业务逻辑无关、纯粹用于唯一标识记录的列（例如 ID, CustomerID, OrderID 等）.
2. 为什么说它不是独立的“约束”?
    依赖基础:
        自动增长特性依赖于它所应用的列的数据类型（必须是数值类型）
        和该列上已有的约束（通常是 PRIMARY KEY 或 UNIQUE 约束）.
    功能补充:
        它本身并不强制数据的唯一性或非空性.
        它只是简化了为主键（或唯一键）列生成唯一值的过程.
        确保唯一性的责任仍然由 PRIMARY KEY 或 UNIQUE 约束承担.
    实现机制:
        它是数据库管理系统提供的一种列属性或特性,
        而不是 SQL 标准中定义的核心约束（如 PRIMARY KEY, UNIQUE, FOREIGN KEY, CHECK, NOT NULL）.
3. 与约束的关系（尤其是主键约束）
    最佳搭档:
        自动增长特性几乎总是应用在定义了 PRIMARY KEY 约束的列.
    完美配合:
        主键约束 (PRIMARY KEY) 要求该列的值唯一且非空 (NOT NULL).
        自动增长 (AUTO INCREMENT) 特性确保每次插入新记录时,数据库自动为该列生成一个唯一且递增的值,
        完美满足了主键约束的两个核心要求（唯一性和非空性）,同时大大简化了开发者的工作（无需手动计算或管理下一个ID）.
    非强制绑定:
        虽然最常用在主键上,但理论上也可以应用在有 UNIQUE 约束的列上,只要该列需要自动生成唯一值.
        不过,主键是更常见的选择。
--------------------------------------------------------------------------------------
# 使用约束的作用总结:
数据完整性 (Data Integrity):
    这是最根本的目的.确保数据准确、可靠、符合业务规则，防止“垃圾数据”进入数据库.
防止数据冗余 (Prevent Redundancy):
    唯一约束（特别是主键）防止重复记录.
    外键确保相关数据只存在于一个地方（父表）,子表只存储引用（ID）.
强制执行业务规则 (Enforce Business Rules):
    CHECK 约束是实现复杂业务规则在数据库层的有力工具(如年龄限制、日期逻辑、状态有效性).
提高数据质量 (Improve Data Quality):
    NOT NULL 确保关键信息不缺失,DEFAULT 提供合理初始值.
提升查询性能 (Improve Query Performance):
    主键和唯一约束自动创建的索引能极大加速基于这些列的查询（WHERE, JOIN, ORDER BY）。
明确数据关系 (Define Relationships):
    外键清晰地定义了表与表之间的关联,使数据库结构易于理解和维护.
简化应用逻辑 (Simplify Application Logic):
    很多数据校验规则在数据库层通过约束实现后,应用层代码可以更简洁,专注于核心业务逻辑,减少重复的校验代码.
    数据库作为最后一道防线保证规则被遵守.
