
'''
    # 正则表达式官网介绍原文
    # 网址:https://docs.python.org/3/library/re.html

    一、正则表达式核心功能
    正则表达式（Regex）用于在文本中进行模式匹配，主要功能包括：
    验证： 检查字符串是否符合特定格式（如邮箱、电话）
    提取： 从文本中抓取特定内容（如URL、日期）
    替换： 修改匹配的文本（如屏蔽敏感词）
    分割： 按模式拆分字符串

    -----------------------------------------------------------------------------------------
    正则表达式翻译网址:
    https://regex101.com/
    开启"Explain"功能
    使用"Code Generator"生成带注释的Python代码

    -----------------------------------------------------------------------------------------
    # 正则表达式的可视化解释器 # Python 3.11+ 原生支持
    import re
    print(re.explain(r'您的正则'))

    -----------------------------------------------------------------------------------------
    # 自动转义工具
    import re

    def escape_regex(text):
        """把字符串转义成正则安全的字面匹配"""
        return re.escape(text)

    print(escape_regex("file.*.txt"))
    # 输出: file\.\*\.txt

'''

import re

# --------------------------------------------------------------------------------------------
'''
二、Python re 模块核心函数
    函数	            描述	                            返回值
    re.search()	    扫描整个字符串,返回第一个匹配	    Match 对象或 None
    re.match()	    从字符串起始位置匹配	            Match 对象或 None
    re.findall()	返回所有匹配的子串	                字符串列表
    re.finditer()	返回匹配对象的迭代器	            Match 对象迭代器
    re.sub()	    替换匹配的子串	                    替换后的字符串
    re.split()	    按模式分割字符串	                分割后的列表
'''
# --------------------------------------------------------------------------------------------
# 三、re.search() 详解
'''
# 基本用法
match = re.search(pattern, string, flags=0)

if match:
    print(match.group())  # 获取匹配内容 → "123"
    print(match.start())  # 起始位置 → 3
    print(match.end())    # 结束位置 → 6
    print(match.span())   # (start, end) → (3, 6)
'''
# --------------------------------------------------------------------------------------------
'''
四、正则表达式语法大全
1. 字符匹配(匹配具体内容)
    模式	    名称        功能说明	                    示例                 等效写法
    a	    字面字符	   匹配指定字符	                a → "a"	
    .	    通配符      匹配除换行字符以外的任意字符	    a.c → "abc"
    \d	               数字 [0-9]	                \d\d → "42"
    \D	    非数字	   匹配非数字	                    \D → "a"	        [^0-9]
    \w	    单词字符    匹配字母/数字/下划线	            \w+ → "Hello_"
    \W	    非单词字符   匹配非字母/数字/下划线	        \W → "@"	        [^a-zA-Z0-9_]
    \s                 空白字符（空格、制表等）	        \s+ → " \t"
    \S	    非空白字符   匹配非空白字符	                \S → "a"	        [^ \t\n\r\f\v]
    [...]	字符集合	                                [aeiou] → "e"
    [^...]	否定字符类  匹配不在括号内的字符	            [^0-9] → "a"	    
# \D详解：大写字母D表示"非"数字，匹配所有不是数字的字符（字母、标点、汉字等）
2. 量词 (重复匹配)
    模式	    说明	                    示例
    *       0次或多次	            a*b → "b", "aaab"
    +	    1次或多次	            \d+ → "123"
    ?	    0次或1次	                colou?r → "color"
    {n}	    精确n次	                \d{4} → "2023"
    {n,}	至少n次	                \w{3,} → "hello"
    {n,m}	n到m次	                \d{2,4} → "123"
3. 位置锚点
    模式	    说明	           作用              示例
    ^	    字符串起始	   匹配字符串开始      ^Start → "Start here"
    $	    字符串结束	   匹配字符串结束      end$ → "This is end"
    \A	    绝对开始        仅匹配整个文本开头	
    \Z	    绝对结束        仅匹配整个文本结束	
    \b	    单词边界	       单词的开始或结束    \bcat\b → "a cat"
    \B	    非单词边界       不在单词边界	    \Bcat\B → "category"
4. 分组与捕获
    模式	        说明	                        示例
    ( )	        捕获分组	                    (ab)+ → "abab"      (\d+) → 捕获"123"
    (?: )	    非捕获分组	                (?:ab)+             (?:ab)+ → 匹配"abab"不捕获
    (?P<name>)	命名分组	                    (?P<year>\d{4})
    (?P=name)	命名反向引用	引用命名捕获组	    (?P<word>\w+) (?P=word)
    \n	        引用第n个分组	                (\d) -\1 → "5-5"
    \1, \2	    反向引用	    引用捕获组	    (\w+) \1 → "the the"
    (?= )	    正向先行断言（后面是...）	    Windows(?=10) → "Windows" in "Windows10"
    (?!)	    负向先行断言（后面不是...）	    Windows(?!7) → 排除"Windows7"
5. 零宽断言 (条件匹配)
    符号	        名称	        作用	            示例
    (?=...)	    正向先行断言	后面必须跟着...	Windows(?=10) → "Windows10"
    (?!...)	    负向先行断言	后面不能跟着...	Windows(?!7) → 非"Windows7"
    (?<=...)	正向后行断言	前面必须是...	    (?<=\$)\d+ → "$100"中的100
    (?<!...)	负向后行断言	前面不能是...	    (?<!\$)\d+ → "100"非"$100"
6. 模式修饰符（全局设置）/标志（Flags）控制
    符号（re.）	简写	        作用	                    示例
    IGNORECASE	I	        忽略大小写	            re.I → 匹配"A"或"a"
    MULTILINE	M	        多行模式 (影响^和$)	    re.M → 每行单独处理
    DOTALL	    S	        使.匹配换行符	            re.S → 跨行匹配
    VERBOSE	    X	        允许添加注释和空白	        增强可读性
    ASCII	    A	        使\w等只匹配ASCII	
    UNICODE	    U	        使\w匹配Unicode (默认)	Python3默认开启
'''
# --------------------------------------------------------------------------------------------
'''
符号重载（单字符多义性）
    字符	    可能含义数量	    示例场景
    ?	    4种	            量词(a?)/非贪婪(.*?)/语法((?=))/字面(\?)
    .	    3种	            通配符/字面点(\.)/字符组内([.])
    ^	    3种	            行首/取反([^a])/字面(\^)
上下文敏感语法
    (?:...)     # 非捕获组
    (?=...)     # 正向先行断言
    (?!...)     # 负向先行断言
    (?P<name>)  # 命名捕获组

正则表达式阅读指南:
    第一步：识别字面文本
    第二步：定位转义序列
    第三步：标记量词区域
    第四步：解析特殊语法
'''
# --------------------------------------------------------------------------------------------
# 示例：提取第一个数字
text = "Price: $123.45"
match = re.search(r'\d+\.\d+', text)
if match:
    print(f"Found: {match.group()} at {match.span()}")
# 输出: Found: 123.45 at (8, 14)
# ---------------------------------高级用法示例-------------------------------------------------
# 1. 提取邮箱
text = "Contact: user@example.com, support@domain.org"
emails = re.findall(r'\b[\w\.-]+@[\w\.-]+\.\w+\b', text)
# 结果: ['user@example.com', 'support@domain.org']

# 2. 替换敏感词
text = "Password: 12345, Secret: abc"
safe_text = re.sub(r'Password: \w+|Secret: \w+', '[REDACTED]', text)
# 结果: "[REDACTED], [REDACTED]"

# 3. 解析复杂日志
log = "2023-08-15 12:30:45 [ERROR] File not found"
pattern = r'(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<msg>.+)'
match = re.search(pattern, log)
if match:
    print(match.groupdict())
    # {'date': '2023-08-15', 'time': '12:30:45', 'level': 'ERROR', 'msg': 'File not found'}
# --------------------------------------------------------------------------------------------

# 多标志组合示例
re.search(r'^start', 'Line1\nStart', flags=re.I | re.M)

# 七、性能优化建议
pattern = re.compile(r'\d{3}-\d{4}')
pattern.search("Phone: 555-1234")

